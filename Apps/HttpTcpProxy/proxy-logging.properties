###############################################################################
# Licensed Materials - Property of IBM
# (c) Copyright IBM Corporation 2016. All Rights Reserved.
#
# Note to U.S. Government Users Restricted Rights:  
# Use, duplication or disclosure restricted by GSA ADP Schedule 
# Contract with IBM Corp. 
###############################################################################

########################################################################
# This is the default properties file used to configure logging
# in the Rational Integration Tester Stater Edition HTTP(S)/TCP Proxy.
########################################################################

############################################################
#  	Global Logging Properties
############################################################
#
# Property: handlers
# 	Specifies a comma separated list of log Handlers. A log
#	handler is a java class that can accept and process log events
#	from the application. 

# Register two logging handlers:
# 	FileHandler - Writes log events to a file on disk
#	ConsoleHandler - Writes log events out to the console for
#					the application.
#
#	Proxy Default: java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Property: .level
# 	This specifies which kinds of events are logged across
# 	all loggers.  For any given logger, this global level
# 	can be overridden by a logger-specific level. A logger level
#	represents the severity of a logging event and can be one
#	of the following values:
#		SEVERE
#		WARNING
#		INFO
#		CONFIG
#		FINE
#		FINER
#		FINEST
#	By specifying a log level, any log events that are below that
#	level are not logged. For example, setting .level = WARNING will
#	only log SEVERE and WARNING level events.
#		
# 	Note: The ConsoleHandler has a separate level
# 	setting to limit messages printed to the console.
#
#	Proxy Default: INFO

handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler
.level = INFO
############################################################

############################################################
# Log Handler-specific properties.
############################################################

### FileHandler-specific properties
# Property: java.util.logging.FileHandler.pattern
#	Specifies where the log file will be written to on disk.
#
# 	By default, the log will be written to %b/../logs/proxy-core-%g.log
#	%b represents the directory for the proxy startup script
#	%g will generate a number to distinguish a rotated log
#
#   %b is supported in addition to the standard FileHandler pattern components when running
#   the Rational Integration Tester Starter Edition HTTP/TCP proxy  
#
#   See http://docs.oracle.com/javase/7/docs/api/java/util/logging/FileHandler.html
#	for more information on filename patterns.

# Property: java.util.logging.FileHandler.limit
#	Specifies the maximum size of the log file in bytes.
#
#	Proxy Default: 50000

# Property: java.util.logging.FileHandler.count
#	Specifies how many log files should be cycled through.
#	This can be combined with a java.util.logging.FileHandler.pattern
#	value that specifies the pattern %g which will generate a number
#	to distinguish a rotated log.
#
#	Proxy Default: 10

# Property: java.util.logging.FileHandler.formatter
#	Specifies a java class that extends Formatter and can be
#	used to transform log events to a String that can be output
#	using the FileHandler log handler.
#
#	Proxy Default: java.util.logging.SimpleFormatter

java.util.logging.FileHandler.pattern = %b/../logs/proxy-core-%g.log
java.util.logging.FileHandler.limit = 50000
java.util.logging.FileHandler.count = 10
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
###

### ConsoleHandler-specific properties
# Property: java.util.logging.ConsoleHandler.level
# 	Controls the log event levels that are logged specifically
#	for the ConsoleHandler. This overrides the global property
#	defined in the .level property. See the comments above for
#	the .level property for more information on logging levels.
#
#	Proxy Default: FINEST

# Property: java.util.logging.ConsoleHandler.formatter
#	Specifies a java class that extends Formatter and can be
#	used to transform log events to a String that can be output
#	using the ConsoleHandler log handler.
#
#	Proxy Default: java.util.logging.SimpleFormatter

java.util.logging.ConsoleHandler.level = FINEST
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
###

############################################################
# Named Logger specific properties.
# 	Provides extra control for particular loggers.
############################################################

# Set the log levels used for particular loggers.
# For example, set the com.xyz.foo logger to only log SEVERE
# messages:
#	com.xyz.foo.level = SEVERE

# Set the logging level of the logger named com.greenhat.rational
# to INFO
com.greenhat.level = INFO
